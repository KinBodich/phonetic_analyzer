Інструкція користувача: Phonetic Analyzer
Призначення:
Програма виконує фонетичний аналіз англійських текстів:
- отримання транскрипцій (фонем)
- поділ на склади
- визначення структури складів (CVV)
- аналіз перших складів
- статистичні метрики

Вимоги:
Python 3.6

ОС: Windows 7 або новіші

Інтернет-з'єднання для автоматичного завантаження ресурсів NLTK

Необхідні бібліотеки:
Установіть перед запуском: pip install nltk pronouncing g2p_en openpyxl

Структура проєкту:
- main.py — основна логіка
- gui.py — графічний інтерфейс
- reader.py, phonetic_analyzer.py, syllabifier.py, statistics_calculator.py, output_writer.py — допоміжні модулі
- Вивід створюється в підпапках: Transcribed, Syllables, FirstSyllables, SyllablesCVV, Statistics.xlsx тощо

Варіанти запуску:
- Через exe-файл:
Завантажити готову версію з GitHub:
https://github.com/KinBodich/phonetic_analyzer.git

- Через Python:
Запустити графічний інтерфейс командою: python gui.py

Як користуватись:
1. Запустіть файл gui.py або готовий exe.
2. Виберіть .txt файл або теку з файлами.
3. Вкажіть папку для збереження результатів.
4. Натисніть кнопку "Старт".
5. Результати з'являться в заданій папці:
- Transcribed — фонемна транскрипція
- Syllables — розбиття на склади
- SyllablesCVV — структура складів
- FirstSyllables — перші склади
- FirstSyllablesCVV — перші склади CVV формату
- Statistics.xlsx — таблиця зі статистикою

Основний алгоритм має багаторівневу fallback-структуру:
1. Пошук у CMUdict
 Перевіряється, чи слово у нормалізованому вигляді (без великих літер, зі стандартним апострофом) є у словнику nltk.corpus.cmudict.dict(). Якщо знайдено — транскрипція повертається одразу.
2. Використання бібліотеки pronouncing
 Якщо попередній словник не містить слова, застосовується інший інтерфейс до того ж ресурсу — pronouncing.phones_for_word(), який у деяких випадках вміє відновлювати форми, яких немає в основному словнику.
3. Обробка скорочень
 Якщо слово містить апостроф (наприклад, she’d), воно розбивається на дві частини — основу та суфікс. Кожна з них транскрибується окремо, а потім об’єднується у спільну послідовність. Для цього використовується словник типових скорочень (contraction_map) і рекурсивний аналіз.
4. Fallback через G2P
 Якщо попередні підходи не дали результату, слово передається до модуля g2p_en, що використовує нейронну модель для побудови транскрипції. Це дає змогу працювати з новотвореними словами, власними назвами або орфографічними помилками.
5. Fallback для окремих літер
 Якщо введено лише літеру (наприклад, z, F), вона інтерпретується як назва англійської літери. Для цього використовується вручну сформована мапа (fallback_letters_map) — наприклад: Z → Z-IY1, F → EH1-F.
Загальна схема обробки для слова виглядає так:
Слово → Нормалізація → Лематизація → Перевірка в словнику → Обробка скорочень → G2P → Fallback літера
Така структура забезпечує майже повне покриття усіх вхідних слів незалежно від складності.

Швидкодія роботи програми:
Корпус з 67 текстів (47.5 mb) - 29 хв 39 с
Компоненти комп'ютера для тестування:
Processor	AMD Ryzen 5 3600 6-Core Processor                 3.60 GHz
Installed RAM	16,0 GB
System type	64-bit operating system, x64-based processor
